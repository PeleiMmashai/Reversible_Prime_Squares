 User Text Segment [00400000]..[00440000]
[00400000] 8fa40000  lw $4, 0($29)            ; 183: lw $a0 0($sp) # argc 
[00400004] 27a50004  addiu $5, $29, 4         ; 184: addiu $a1 $sp 4 # argv 
[00400008] 24a60004  addiu $6, $5, 4          ; 185: addiu $a2 $a1 4 # envp 
[0040000c] 00041080  sll $2, $4, 2            ; 186: sll $v0 $a0 2 
[00400010] 00c23021  addu $6, $6, $2          ; 187: addu $a2 $a2 $v0 
[00400014] 0c100009  jal 0x00400024 [main]    ; 188: jal main 
[00400018] 00000000  nop                      ; 189: nop 
[0040001c] 3402000a  ori $2, $0, 10           ; 191: li $v0 10 
[00400020] 0000000c  syscall                  ; 192: syscall # syscall 10 (exit) 
[00400024] 34050000  ori $5, $0, 0            ; 16: li $a1, 0 #int n = 0 
[00400028] 34020004  ori $2, $0, 4            ; 18: li $v0, 4 #ask the user to enter the number of square primes requested 
[0040002c] 3c011001  lui $1, 4097 [prompt]    ; 19: la $a0, prompt 
[00400030] 34240028  ori $4, $1, 40 [prompt]  
[00400034] 0000000c  syscall                  ; 20: syscall 
[00400038] 34020005  ori $2, $0, 5            ; 22: li $v0, 5 #Prompt the user to enter the number 
[0040003c] 0000000c  syscall                  ; 23: syscall 
[00400040] 00022821  addu $5, $0, $2          ; 24: move $a1, $v0 #Move the user input from $v0, to $t0 
[00400044] 10a00006  beq $5, $0, 24 [Not_Applicable-0x00400044]
[00400048] 23bdfffc  addi $29, $29, -4        ; 29: addi $sp, $sp, -4 #allocate memory in the stack for one register 
[0040004c] afa50000  sw $5, 0($29)            ; 30: sw $a1, 0($sp) #Store the a registers in the stack 
[00400050] 0c000000  jal 0x00000000 [main_loop]; 31: jal main_loop #Call the main_loop procedure 
[00400054] 8fa50000  lw $5, 0($29)            ; 32: lw $a1, 0($sp) #Load the a registers from the stack 
[00400058] 23bd0004  addi $29, $29, 4         ; 33: addi $sp, $sp, 4 #Deallocate memory from the stack 
[0040005c] 3402000a  ori $2, $0, 10           ; 36: li $v0, 10 #End the program 
[00400060] 0000000c  syscall                  ; 37: syscall 
[00400064] 34080000  ori $8, $0, 0            ; 51: li $t0, 0 #int counter = 0 
[00400068] 34090001  ori $9, $0, 1            ; 52: li $t1, 1 #int i = 1 
[0040006c] 11260000  beq $9, $6, 0 [stop-0x0040006c]; 55: beq $t1, $a2, stop #If i == n, stop loop 
[00400070] 00c9001a  div $6, $9               ; 57: div $a2, $t1 #n%i 
[00400074] 00005010  mfhi $10                 ; 58: mfhi $t2 
[00400078] 15400002  bne $10, $0, 8 [yes-0x00400078]; 60: bnez $t2, yes #if n%i != 0, skip the counter 
[0040007c] 21080001  addi $8, $8, 1           ; 62: addi $t0, $t0, 1 #counter++ 
[00400080] 21290001  addi $9, $9, 1           ; 65: addi $t1, $t1, 1 #i++ 
[00400084] 0810001b  j 0x0040006c [while_isPrime]; 67: j while_isPrime 
[00400088] 34030000  ori $3, $0, 0            ; 70: li $v1, 0 #bool isPrime -> false 
[0040008c] 34010001  ori $1, $0, 1            ; 73: bne $t0, 1, False #if counter != 1; return false 
[00400090] 14280002  bne $1, $8, 8 [False-0x00400090] 
[00400094] 20630001  addi $3, $3, 1           ; 75: addi $v1, $v1, 1 #bool isprime -> true 
[00400098] 03e00008  jr $31                   ; 78: jr $ra 
[0040009c] 23bdfffc  addi $29, $29, -4        ; 89: addi $sp, $sp, -4 #Allocate memory in the stack for 1 register 
[004000a0] afb00000  sw $16, 0($29)           ; 90: sw $s0, 0($sp) #Store the s register in the stack 
[004000a4] 34080000  ori $8, $0, 0            ; 92: li $t0, 0 #int reminder = 0 
[004000a8] 3410000a  ori $16, $0, 10          ; 93: li $s0, 10 #const 10 
[004000ac] 34030000  ori $3, $0, 0            ; 94: li $v1, 0 #Set the return value as 0 
[004000b0] 10a00000  beq $5, $0, 0 [return_reverse-0x004000b0]
[004000b4] 00b0001a  div $5, $16              ; 98: div $a1, $s0 
[004000b8] 00004010  mfhi $8                  ; 99: mfhi $t0 #n%10 
[004000bc] 00002812  mflo $5                  ; 100: mflo $a1 #n/10 
[004000c0] 04a00000  bltz $5 0 [stop_reverse-0x004000c0]

Kernel Text Segment [80000000]..[80010000]
[80000180] 0001d821  addu $27, $0, $1         ; 90: move $k1 $at # Save $at 
[80000184] 3c019000  lui $1, -28672           ; 92: sw $v0 s1 # Not re-entrant and we can't trust $sp 
[80000188] ac220200  sw $2, 512($1)           
[8000018c] 3c019000  lui $1, -28672           ; 93: sw $a0 s2 # But we need to use these registers 
[80000190] ac240204  sw $4, 516($1)           
[80000194] 401a6800  mfc0 $26, $13            ; 95: mfc0 $k0 $13 # Cause register 
[80000198] 001a2082  srl $4, $26, 2           ; 96: srl $a0 $k0 2 # Extract ExcCode Field 
[8000019c] 3084001f  andi $4, $4, 31          ; 97: andi $a0 $a0 0x1f 
[800001a0] 34020004  ori $2, $0, 4            ; 101: li $v0 4 # syscall 4 (print_str) 
[800001a4] 3c049000  lui $4, -28672 [__m1_]   ; 102: la $a0 __m1_ 
[800001a8] 0000000c  syscall                  ; 103: syscall 
[800001ac] 34020001  ori $2, $0, 1            ; 105: li $v0 1 # syscall 1 (print_int) 
[800001b0] 001a2082  srl $4, $26, 2           ; 106: srl $a0 $k0 2 # Extract ExcCode Field 
[800001b4] 3084001f  andi $4, $4, 31          ; 107: andi $a0 $a0 0x1f 
[800001b8] 0000000c  syscall                  ; 108: syscall 
[800001bc] 34020004  ori $2, $0, 4            ; 110: li $v0 4 # syscall 4 (print_str) 
[800001c0] 3344003c  andi $4, $26, 60         ; 111: andi $a0 $k0 0x3c 
[800001c4] 3c019000  lui $1, -28672           ; 112: lw $a0 __excp($a0) 
[800001c8] 00240821  addu $1, $1, $4          
[800001cc] 8c240180  lw $4, 384($1)           
[800001d0] 00000000  nop                      ; 113: nop 
[800001d4] 0000000c  syscall                  ; 114: syscall 
[800001d8] 34010018  ori $1, $0, 24           ; 116: bne $k0 0x18 ok_pc # Bad PC exception requires special checks 
[800001dc] 143a0008  bne $1, $26, 32 [ok_pc-0x800001dc] 
[800001e0] 00000000  nop                      ; 117: nop 
[800001e4] 40047000  mfc0 $4, $14             ; 119: mfc0 $a0 $14 # EPC 
[800001e8] 30840003  andi $4, $4, 3           ; 120: andi $a0 $a0 0x3 # Is EPC word-aligned? 
[800001ec] 10040004  beq $0, $4, 16 [ok_pc-0x800001ec]
[800001f0] 00000000  nop                      ; 122: nop 
[800001f4] 3402000a  ori $2, $0, 10           ; 124: li $v0 10 # Exit on really bad PC 
[800001f8] 0000000c  syscall                  ; 125: syscall 
[800001fc] 34020004  ori $2, $0, 4            ; 128: li $v0 4 # syscall 4 (print_str) 
[80000200] 3c019000  lui $1, -28672 [__m2_]   ; 129: la $a0 __m2_ 
[80000204] 3424000d  ori $4, $1, 13 [__m2_]   
[80000208] 0000000c  syscall                  ; 130: syscall 
[8000020c] 001a2082  srl $4, $26, 2           ; 132: srl $a0 $k0 2 # Extract ExcCode Field 
[80000210] 3084001f  andi $4, $4, 31          ; 133: andi $a0 $a0 0x1f 
[80000214] 14040002  bne $0, $4, 8 [ret-0x80000214]; 134: bne $a0 0 ret # 0 means exception was an interrupt 
[80000218] 00000000  nop                      ; 135: nop 
[8000021c] 401a7000  mfc0 $26, $14            ; 145: mfc0 $k0 $14 # Bump EPC register 
[80000220] 275a0004  addiu $26, $26, 4        ; 146: addiu $k0 $k0 4 # Skip faulting instruction 
[80000224] 409a7000  mtc0 $26, $14            ; 148: mtc0 $k0 $14 
[80000228] 3c019000  lui $1, -28672           ; 153: lw $v0 s1 # Restore other registers 
[8000022c] 8c220200  lw $2, 512($1)           
[80000230] 3c019000  lui $1, -28672           ; 154: lw $a0 s2 
[80000234] 8c240204  lw $4, 516($1)           
[80000238] 001b0821  addu $1, $0, $27         ; 157: move $at $k1 # Restore $at 
[8000023c] 40806800  mtc0 $0, $13             ; 160: mtc0 $0 $13 # Clear Cause register 
[80000240] 401a6000  mfc0 $26, $12            ; 162: mfc0 $k0 $12 # Set Status register 
[80000244] 375a0001  ori $26, $26, 1          ; 163: ori $k0 0x1 # Interrupts enabled 
[80000248] 409a6000  mtc0 $26, $12            ; 164: mtc0 $k0 $12 
[8000024c] 42000018  eret                     ; 167: eret